[
["mcmc.html", "Chapter 2 MCMC", " Chapter 2 MCMC Here is the Stan code equivalent to the original JAGS code in BMHE. // normal model data { int&lt;lower=1&gt; N; // sample size real&lt;lower=0&gt; k; // uniform prior bounds real y[N]; real X[N]; } parameters { real beta; real alpha; real lsigma; } transformed parameters { real mu[N]; real&lt;lower=0&gt; sigma = exp(lsigma); for (i in 1:N) { mu[i] = alpha + beta*X[i]; } } model { // likelihood for (i in 1:N) { target += normal_lpdf(y[i] | mu[i], sigma); } // priors // alpha ~ normal(0, 0.00001); // beta ~ normal(0, 0.00001); alpha ~ uniform(-k, k); beta ~ uniform(-k, k); lsigma ~ uniform(-k, k); } The R code for running this Stan code and presenting the results is very similar to the original. ## ANALYSIS OF THE NORMAL MODEL - pages 69-73 # define the working directory assuming - the user is already in ~/WebMaterial/ch2 working.dir &lt;- paste0(getwd(), &quot;/&quot;) # Load data from STATA .dta format data &lt;- foreign::read.dta(&quot;phbirths.dta&quot;) attach(data) # Arrange the data and define relevant variables y &lt;- grams N &lt;- length(y) X &lt;- gestate k &lt;- 5000 library(R2jags) stan_dat &lt;- list(&quot;N&quot;,&quot;y&quot;,&quot;X&quot;,&quot;k&quot;) # define the data filein &lt;- paste0(working.dir,&quot;modelNormal.stan&quot;) # define the model file params &lt;- c(&quot;alpha&quot;,&quot;beta&quot;,&quot;sigma&quot;) # define the parameters to be monitored inits &lt;- function(){ # create a function to randomly simulate list(alpha = rnorm(1), beta = rnorm(1), lsigma = rnorm(1)) # initial values for the required nodes } ########################################### ## 1. Uncentred model n.iter &lt;- 10000 # define the number of iterations n.burnin &lt;- 9500 # define the burn-in n.thin &lt;- floor((n.iter - n.burnin)/500) # compute the thinning to have 1000 iterations monitored # Launch Stan and print the summary table m.1 &lt;- rstan::stan(data = stan_dat, init = inits, pars = params, file = filein, chains = 2, iter = n.iter, warmup = n.burnin, thin = n.thin) print(m.1, digits=3, intervals=c(0.025, 0.975)) ############################################################# ## 2. Uncentred model with thinning (run for longer chains) n.iter &lt;- 50000 # increase number of iterations to improve convergence n.burnin &lt;- 9500 # same burn-in n.thin &lt;- floor((n.iter - n.burnin)/500) # compute thinning, this time &gt; 1 m.2 &lt;- rstan::stan(data = stan_dat, init = inits, pars = params, file = filein, chains = 2, iter = n.iter, warmup = n.burnin, thin = n.thin) print(m.2, digits=3, intervals=c(0.025, 0.975)) ################################################ ## 3. Centred model X &lt;- gestate - mean(gestate) # create centred covariate to improve convergence stan_dat &lt;- list(&quot;N&quot;,&quot;y&quot;,&quot;X&quot;,&quot;k&quot;) # need to re-define data list n.iter &lt;- 10000 # doesn&#39;t need so many iterations, now n.burnin &lt;- 9500 n.thin &lt;- floor((n.iter - n.burnin)/500) # thinning computed and set to 1 again m.3 &lt;- rstan::stan(data = stan_dat, init = inits, pars = params, file = filein, chains = 2, iter = n.iter, warmup = n.burnin, thin = n.thin) print(m.3,digits=3, intervals=c(0.025, 0.975)) The plotting code here is simpler than the original JAGS code because we call the plotting functions from rstan directly. ########### ## plots ## ########### ### 1. Uncentred model rstan::traceplot(m.1, pars = c(&quot;alpha&quot;, &quot;beta&quot;), nrow = 2) ## ACF plot rstan::stan_ac(m.1, pars = c(&quot;alpha&quot;, &quot;beta&quot;)) ## Computes correlation for this model cor(alpha.u,beta.u) txt2 &lt;- substitute(&quot;Scatterplot for &quot;*alpha* &quot; and &quot;*beta* &quot; - Uncentred model&quot;) rstan::stan_scat(m.1, pars = c(&quot;alpha&quot;, &quot;beta&quot;)) ### 2. Uncentred model with thinning # Traceplot rstan::traceplot(m.2, pars = c(&quot;alpha&quot;, &quot;beta&quot;), nrow = 2) ## ACF plot rstan::stan_ac(m.2, pars = c(&quot;alpha&quot;, &quot;beta&quot;)) ## Computes correlation for this model cor(alpha.l,beta.l) txt4 &lt;- substitute(&quot;Scatterplot for &quot;*alpha* &quot; and &quot;*beta* &quot; - Uncentred model with thinning&quot;) rstan::stan_scat(m.2, pars = c(&quot;alpha&quot;, &quot;beta&quot;)) ### 3. Centred model rstan::traceplot(m.3, pars = c(&quot;alpha&quot;, &quot;beta&quot;), nrow = 2) ## ACF plot rstan::stan_ac(m.3, pars = c(&quot;alpha&quot;, &quot;beta&quot;)) ## Plots Scatterplot for correlation cor(alpha.c,beta.c) txt3 &lt;- substitute(&quot;Scatterplot for &quot;*alpha* &quot; and &quot;*beta* &quot; - Centred model&quot;) rstan::stan_scat(m.3, pars = c(&quot;alpha&quot;, &quot;beta&quot;)) "]
]
